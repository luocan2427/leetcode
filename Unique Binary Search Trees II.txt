/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode *> generateTrees(int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        return creat(0,n-1);
    }
    vector<TreeNode *> creat(int beg, int end)
    {
        vector<TreeNode* > res;
        if (beg > end)
        {
            res.push_back(NULL);
            return res;
        }
        for(int i = beg; i <= end; i++)
        {
            vector<TreeNode* > leftTree = creat(beg, i - 1);
            vector<TreeNode* > rightTree = creat(i + 1, end);
            for(int j = 0; j < leftTree.size(); j++)
                for(int k = 0; k < rightTree.size(); k++)
                {
                    TreeNode *node = new TreeNode(i + 1);
                    res.push_back(node);
                    node->left = leftTree[j];
                    node->right = rightTree[k];              
                }           
        }        
        return res;
    }
};