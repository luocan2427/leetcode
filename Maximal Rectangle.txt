class Solution {
public:    
    int maximalRectangle(vector<vector<char> > &matrix) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (matrix.size() == 0)
            return 0;
        vector<int> a(matrix[0].size(), 0);
        int res = 0;
        for(int i = 0; i < matrix.size(); i++)
        {
            for(int j = 0; j < matrix[i].size(); j++)
                a[j] = matrix[i][j] == '1' ? a[j] + 1 : 0;
            res = max(res,largestRectangleArea(a));
        }
        return res;
    }
    int largestRectangleArea(vector<int> &height) 
    {
        stack<pair<int,int> > stk;
        int res = 0;
        for(int i = 0;i <= height.size();i++)
        {
            if(i == height.size() || (!stk.empty() && height[i] < stk.top().first))
            {
                while(!stk.empty() && (i == height.size() || stk.top().first > height[i]))
                {
                    int temp1 = stk.top().first;
                    int temp2 = stk.top().second;
                    stk.pop();
                    if(!stk.empty())
                        res = max(res,temp1*(i-stk.top().second-1));
                    else
                        res = max(res,temp1*(i));
                }
            }
            if(i < height.size())
                stk.push(make_pair(height[i],i));
        }
        return res;
    }
};
