class Solution {
public:
    bool exist(vector<vector<char> > &board, string word) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int n = board.size();
        if(n == 0) return 0;
        vector<vector<bool>> processed(board.size(), vector<bool>(board[0].size(), false));
        int m = board[0].size();
        for(int i = 0;i < n;i++)
            for(int j = 0;j < m;j++)
                if(board[i][j] == word[0] && search(board,word,0,i,j,processed)) return 1;
        return 0;
    }
    bool search(vector<vector<char> > &board, string &word, int b, int x, int y,vector<vector<bool>> &processed)
    {
        int n = board.size();
        int m = board[0].size();
        if(b == word.size()) return 1;
        if(x >= 0 && y >= 0 && x < n && y < m && processed[x][y] == 0 && board[x][y] == word[b])
        {
            processed[x][y] = 1;
            if(search(board,word,b+1,x,y+1,processed) || search(board,word,b+1,x,y-1,processed) || search(board,word,b+1,x+1,y,processed) || search(board,word,b+1,x-1,y,processed))
            {
                processed[x][y] = 0;
                return 1;
            }
            processed[x][y] = 0;
        }
        return 0;
    }
};
