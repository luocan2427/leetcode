class Solution {
public:    
    int maximalRectangle(vector<vector<char> > &matrix) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (matrix.size() == 0)
        {
            return 0;
        }   
        vector<int> a(matrix[0].size(), 0);
        vector<int> width(matrix[0].size());
        int maxArea = 0;
        for(int i = 0; i < matrix.size(); i++)
        {
            for(int j = 0; j < matrix[i].size(); j++)
            {
                a[j] = matrix[i][j] == '1' ? a[j] + 1 : 0;
            }   
            maxArea = max(maxArea, calArea(a, width));
        }
        return maxArea;
    }
    int calArea(vector<int> &a, vector<int> &width)
    {
        for(int i = 0; i < width.size(); i++)
        {
            width[i] = 0;
        }   
        stack<int> s;
        for(int i = 0; i < a.size(); i++)
        {
            if (s.empty())
            {
                s.push(i);
                width[i] = 0;
            }
            else
            {
                while(!s.empty())
                {
                    if (a[s.top()] < a[i])
                    {
                        width[i] = i - s.top() - 1;
                        s.push(i);
                        break;
                    }
                    else
                    {
                        s.pop();
                    }
                }
                if (s.empty())
                {
                    s.push(i);
                    width[i] = i;
                }
            }
        }
        while(!s.empty()) s.pop();
        for(int i = a.size()-1;i >= 0;i--)
        {
            if (s.empty())
            {
                s.push(i);
                width[i] = 0;
            }
            else
            {
                while(!s.empty())
                {
                    if (a[i] > a[s.top()])
                    {
                        width[i] += s.top()-i-1;
                        s.push(i);
                        break;
                    }
                    else
                        s.pop();
                }
                
                if (s.empty())
                {
                    width[i] += a.size()-i-1;
                    s.push(i);
                }
            }
        }
        int maxArea = 0;    
        for(int i = 0; i < width.size(); i++)
        {
            maxArea = max(maxArea, (width[i]+1)*a[i]);
        }   
        return maxArea;
    }
};