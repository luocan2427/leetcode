/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > zigzagLevelOrder(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        queue<pair<TreeNode *,int> > que;
        que.push(make_pair(root,1));
        int base = 1;
        vector<vector<int> > res;
        vector<int> temp;
        if(root == NULL)
        {
            return res;
        }
        while(!que.empty())
        {
            TreeNode *tmp = que.front().first;
            if(tmp == NULL)
            {
                break;
            }
            int line = que.front().second;
            que.pop();
            if(tmp->left != NULL)
            {
                que.push(make_pair(tmp->left,line+1));
            }
            if(tmp->right != NULL)
            {
                que.push(make_pair(tmp->right,line+1));
            }
            if(line == base)
            {
                temp.push_back(tmp->val);
            }
            else
            {
                base = line;
                if(line%2 == 1)
                {
                    vector<int> temp1;
                    for(int i = temp.size()-1;i >= 0;i--)
                    {
                        temp1.push_back(temp[i]);
                    }
                    res.push_back(temp1);
                }
                else
                {
                    res.push_back(temp);
                }
                temp.clear();
                temp.push_back(tmp->val);
            }
        }
        if(base%2 == 0)
        {
            vector<int> temp1;
            for(int i = temp.size()-1;i >= 0;i--)
            {
                temp1.push_back(temp[i]);
            }
            res.push_back(temp1);
        }
        else
        {
            res.push_back(temp);
        }
        return res;
    }
};