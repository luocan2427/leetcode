class Solution {
public:
    int largestRectangleArea(vector<int> &height) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if(height.size() == 0)
        {
            return 0;
        }
        stack<pair<int,int> > stk;
        stk.push(make_pair(height[0],0));
        int max = 0;
        for(int i = 1;i < height.size();i++)
        {
            if(height[i] >= stk.top().first)
            {
                stk.push(make_pair(height[i],i));
            }
            else
            {
                while(!stk.empty() && stk.top().first > height[i])
                {
                    int temp1 = stk.top().first;
                    int temp2 = stk.top().second;
                    stk.pop();
                    if(!stk.empty())
                    {
                        if(temp1*(i-stk.top().second-1) > max)
                        {
                            max = temp1*(i-stk.top().second-1);
                        }
                    }
                    else
                    {
                        if(temp1*(i) > max)
                        {
                            max = temp1*(i);
                        }
                    }
                    stk.push(make_pair(temp1,temp2));
                    stk.pop();
                }
                stk.push(make_pair(height[i],i));
            }
        }
        if(!stk.empty())
        {
            int t = height.size();
            int h;
            while(!stk.empty())
            {
                int temp1 = stk.top().first;
                int temp2 = stk.top().second;
                stk.pop();
                if(!stk.empty())
                {
                    if(temp1*(t-stk.top().second-1) > max)
                    {
                        max = temp1*(t-stk.top().second-1);
                    }
                }
                else
                {
                    if(temp1*(t) > max)
                    {
                        max = temp1*(t);
                    }
                }
                stk.push(make_pair(temp1,temp2));
                h = stk.top().first;
                stk.pop();
            }
            if(h*t > max)
            {
                max = h*t;
            }
        }
        return max;
    }
};