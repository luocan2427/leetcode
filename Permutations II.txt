class Solution {
public:
    vector<vector<int> > permuteUnique(vector<int> &num) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        sort(num.begin(),num.end());
        vector<vector<int> > res;
        vector<bool> visited(num.size(),0);
        vector<int> temp;
        dfs(res,temp,num,visited);
        return res;
    }
    void dfs(vector<vector<int> > &res,vector<int> temp,vector<int> &num,vector<bool> &visited)
    {
        if(temp.size() == num.size())
        {
            res.push_back(temp);
            return;
        }
        for(int i = 0;i < visited.size();i++)
        {
            if(visited[i] == 0 && (i == 0 || visited[i-1] == 1 || num[i-1] != num[i]))
            {
                vector<int> tmp = temp;
                tmp.push_back(num[i]);
                visited[i] = 1;
                dfs(res,tmp,num,visited);
                visited[i] = 0;
            }
        }
    }
};