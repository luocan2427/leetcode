/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int sumNumbers(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int res = 0;
        queue<pair<int,TreeNode *> > que;
        if(root == NULL)
        {
            return 0;
        }
        que.push(make_pair(root->val,root));
        while(!que.empty())
        {
            pair<int,TreeNode *> tmp = que.front();
            que.pop();
            if(tmp.second->left == NULL && tmp.second->right == NULL)
            {
                res += tmp.first;
            }
            else
            {
                if(tmp.second->left != NULL)
                {
                    que.push(make_pair(tmp.first*10+tmp.second->left->val,tmp.second->left));
                }
                if(tmp.second->right != NULL)
                {
                    que.push(make_pair(tmp.first*10+tmp.second->right->val,tmp.second->right));
                }
            }
        }
        return res;
    }
};
