/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        RandomListNode *cur = head;
        while(cur != NULL)
        {
            RandomListNode *tmp = new RandomListNode(cur->label);
            tmp->next = cur->next;
            cur->next = tmp;
            cur = cur->next->next;
        }
        cur = head;
        while(cur != NULL)
        {
            RandomListNode *tmp = cur->random;
            cur = cur->next;
            if(tmp != NULL) cur->random = tmp->next;
            else cur->random = tmp;
            cur = cur->next;
        }
        cur = head;
        RandomListNode *res = NULL;
        RandomListNode **now = &res;
        while(cur != NULL)
        {
            *now = cur->next;
            now = &((*now)->next);
            cur->next = cur->next->next;
            cur = cur->next;
        }
        return res;
    }
};
