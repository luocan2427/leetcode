bool dp[1000][1000];
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function    
        int n1 = s1.size();
        int n2 = s2.size();
        int n3 = s3.size();
        memset(dp,0,sizeof(dp));
        if(n3 != n1+n2)
        {
            return 0;
        }
        if(n1 == 0)
        {
            if(s2 == s3) return 1;
            else return 0;
        }
        if(n2 == 0)
        {
            if(s1 == s3) return 1;
            else return 0;
        }
        dp[n1][n2] = 1;
        for(int i = 0;i < n1;i++)
        {
            dp[i][n2] = 0;
        }
        for(int i = 0;i < n2;i++)
        {
            dp[n1][i] = 0;
        }
        for(int i = n1;i >= 0;i--)
        {
            for(int j = n2;j >= 0;j--)
            {
                bool temp = 0;
                if(i < n1 && s1[i] == s3[i+j])
                {
                    temp = temp || dp[i+1][j];
                }
                if(j < n2 && s2[j] == s3[i+j])
                {
                    temp = temp || dp[i][j+1];
                }
                dp[i][j] = temp;
                dp[n1][n2] = 1;
            }
        }
        return dp[0][0];
    }
};