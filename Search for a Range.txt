class Solution {
public:
    vector<int> searchRange(int A[], int n, int target) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<int> res;
        res.push_back(searchLeft(A,0,n-1,target));
        res.push_back(searchRight(A,0,n-1,target));
        return res;
    }
    int searchRight(int A[],int left,int right,int target)
    {
        if(left == right)
        {
            if(A[right] == target)
            {
                return left;
            }
            else
            {
                return -1;
            }
        }
        if(left+1 == right)
        {
            if(A[left] == target && A[right] == target)
            {
                return right;
            }
            else if(A[right] == target)
            {
                return right;
            }
            else if(A[left] == target)
            {
                return left;
            }
            else
            {
                return -1;
            }
        }
        int mid = left+(right-left)/2;
        if(A[mid] == target)
        {
            if(A[mid+1] == target)
            {
                searchRight(A,mid+1,right,target);
            }
            else
            {
                return mid;
            }
        }
        else
        {
            if(A[mid] > target)
            {
                searchRight(A,left,mid-1,target);
            }
            else
            {
                searchRight(A,mid+1,right,target);
            }
        }
    }
    int searchLeft(int A[],int left,int right,int target)
    {
        if(left == right)
        {
            if(A[right] == target)
            {
                return left;
            }
            else
            {
                return -1;
            }
        }
        if(left+1 == right)
        {
            if(A[left] == target && A[right] == target)
            {
                return left;
            }
            else if(A[right] == target)
            {
                return right;
            }
            else if(A[left] == target)
            {
                return left;
            }
            else
            {
                return -1;
            }
        }
        int mid = left+(right-left)/2;
        if(A[mid] == target)
        {
            if(A[mid-1] == target)
            {
                searchLeft(A,left,mid-1,target);
            }
            else
            {
                return mid;
            }
        }
        else
        {
            if(A[mid] > target)
            {
                searchLeft(A,left,mid-1,target);
            }
            else
            {
                searchLeft(A,mid+1,right,target);
            }
        }
    }
};