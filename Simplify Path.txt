class Solution {
public:
    string simplifyPath(string path) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        deque<string> que;
        int b = 0,t = 0;
        while(t < path.size())
        {
            if(path[t] == '/')
            {
                string cur = path.substr(b,t-b);
                if(cur == ".." && !que.empty())
                {
                    que.pop_back();
                }
                else if(cur != "" && cur != "." && cur != "..")
                {
                    que.push_back(cur);
                }
                b = t+1;
            }
            t++;
        }
        string cur = path.substr(b,t-b);
        if(cur == ".." && !que.empty())
        {
            que.pop_back();
        }
        else if(cur != "" && cur != "." && cur != "..")
        {
            que.push_back(cur);
        }
        string res = "/";
        while(!que.empty())
        {
            res = res+que.front()+"/";
            que.pop_front();
        }
        return res.substr(0,res.size()-1 > 0 ? res.size()-1 : 1);
    }
};
