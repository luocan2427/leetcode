class Solution {
public:
    void solve(vector<vector<char>> &board) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int n = board.size();
        if(n == 0)
        {
            return;
        }
        int m = board[0].size();
        for(int i = 0;i < n;i++)
        {
            dfs(board,i,0);
            dfs(board,i,m-1);
        }
        for(int i = 0;i < m;i++)
        {
            dfs(board,0,i);
            dfs(board,n-1,i);
        }
        for(int i = 0;i < n;i++)
        {
            for(int j = 0;j < m;j++)
            {
                if(board[i][j] == 'L')
                {
                    board[i][j] = 'O';
                }
                else if(board[i][j] == 'O')
                {
                    board[i][j] = 'X';
                }
            }
        }
    }
    int dfs(vector<vector<char>> &board,int i,int j)
    {
        int n = board.size();
        int m = board[0].size();
        stack<pair<int,int>> stk;
        stk.push(make_pair(i,j));
        pair<int,int> p;
        while(!stk.empty())
        {
            p = stk.top();  
            stk.pop();  
            if(p.first >= 0 && p.first <= n-1 && p.second >= 0 && p.second <= m-1 && board[p.first][p.second] == 'O')
            {
                board[p.first][p.second] = 'L';
                stk.push(make_pair(p.first-1,p.second));
                stk.push(make_pair(p.first+1,p.second));
                stk.push(make_pair(p.first,p.second-1));
                stk.push(make_pair(p.first,p.second+1));
            }
        }
    }
};