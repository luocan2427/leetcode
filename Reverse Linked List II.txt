/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int i = 1;
        ListNode *temp = head;
        stack<ListNode *> tmp;
        if(m == 1)
        {
            i++;
            ListNode *temp1 = head;
            ListNode *temp2;
            temp = temp->next;
            while (i <= n)
            {
                temp2 = temp->next;
                temp->next = head;
                head = temp;
                temp = temp2;
                i++;
                
            }
            temp1->next = temp;
            return head;
        }
        while(i < m-1)
        {
            temp = temp->next;
            i++;
        }
        ListNode *temp1 = temp;
        temp = temp->next;
        i++;
        while(i <= n)
        {
            tmp.push(temp);
            temp = temp->next;
            i++;
        }
        ListNode *temp2 = temp;
        while(!tmp.empty())
        {
            temp1->next = tmp.top();
            temp1 = temp1->next;
            tmp.pop();
        }
        if(temp1 != NULL)
        {
            temp1->next = temp2;
        }
        return head;
    }
};