class Solution {
public:
    vector<int> findSubstring(string S, vector<string> &L) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        unordered_map<string,int> mymap;
        vector<int> res;
        for(int i = 0;i < L.size();i++)
        {
            if(mymap[L[i]] > 0)
            {
                mymap[L[i]]++;
            }
            else
            {
                mymap[L[i]] = 1;
            }
        }
        for(int i = 0;i+L.size()*L[0].size() <= S.size();i++)
        {
            if(checker(S,mymap,i,L[0].size(),L.size()))
            {
                res.push_back(i);
            }
        }
        return res;
    }
    bool checker(string &S,unordered_map<string,int> temp,int p,int k,int n)
    {
        int f = n;
        for(int i = 0;i < f;i++)
        {
            if(temp[S.substr(p+k*i,k)] > 0)
            {
                temp[S.substr(p+k*i,k)]--;
                n--;   
            }
            else
            {
                return false;
            }
        }
        if(n == 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
};
