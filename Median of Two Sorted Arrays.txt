class Solution {
public:
    double findMedianSortedArrays(int A[], int m, int B[], int n) {
        int k = m + n; 
        double res = findMid(A,m,B,n,k/2+1);
        if(k%2 == 0)
        {
            res = (res+findMid(A,m,B,n,k/2))/2;
        }
        return res; 
    }
    double findMid(int *A,int m,int *B,int n,int k)
    {
        if(m > n)
        {
            return findMid(B,n,A,m,k);
        }
        if(m == 0)
        {
            return B[k-1];
        }
        if(k == 1)
        {
            return min(A[0],B[0]);
        }
        int pa = min(m,k/2);
        int pb = k-pa;
        if(A[pa-1] < B[pb-1])
        { 
            return findMid(A+pa,m-pa,B,pb,k-pa);
        }
        else if(A[pa-1] > B[pb-1])
        {
            return findMid(A,pa,B+pb,n-pb,k-pb);
        }
        else
        {
            return A[pa-1];
        }
    }
};
