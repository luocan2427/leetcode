bool dp[100][100][100];
class Solution {
public:
    bool isScramble(string s1, string s2) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (s1.size() != s2.size())
            return false;
        for(int i = 0; i < s1.size(); i++)
            for(int j = 0; j < s2.size(); j++)
                dp[1][i][j] = (s1[i] == s2[j]);
        for(int len = 2; len <= s1.size(); len++)
        {
            for(int s1Beg = 0; s1Beg < s1.size(); s1Beg++)
            {
                int s1End = s1Beg + len - 1;
                if (s1End >= s1.size()) break;
                for(int s2Beg = 0; s2Beg < s2.size(); s2Beg++)
                {
                    int s2End = s2Beg + len - 1;
                    if (s2End >= s2.size()) break;
                    dp[len][s1Beg][s2Beg] = false;    
                    for(int s1Mid = s1Beg; s1Mid < s1End; s1Mid++)
                    {
                        int leftSize = s1Mid - s1Beg + 1;
                        int rightSize = len - leftSize;
                        int s2Mid = s2Beg + leftSize - 1;
                        bool res1 = dp[leftSize][s1Beg][s2Beg] && dp[rightSize][s1Mid+1][s2Mid+1];
                        s2Mid = s2End - leftSize;
                        bool res2 = dp[leftSize][s1Beg][s2Mid+1] && dp[rightSize][s1Mid+1][s2Beg];
                        dp[len][s1Beg][s2Beg] = dp[len][s1Beg][s2Beg] || res1 || res2;
                    }
                }
            }
        }
        return dp[s1.size()][0][0];
    }
};