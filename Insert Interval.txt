/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int i,flag = 0,k = 0;
        for(i = 0;i < intervals.size();i++)
        {
            if(intervals[i].start >= newInterval.start)
            {
                break;
            }
            if(intervals[i].end >= newInterval.start)
            {
                newInterval.start = intervals[i].start;
                break;
            }
        }
        for(;i-k < intervals.size();i++)
        {
            if(newInterval.end < intervals[i-k].start)
            {
                intervals.insert(intervals.begin()+i-k,newInterval);
                flag = 1;
                break;
            }
            else if(newInterval.end >= intervals[i-k].start && newInterval.end <= intervals[i-k].end)
            {
                intervals[i-k].start = newInterval.start;
                flag = 1;
                break;
            }
            else
            {
                intervals.erase(intervals.begin()+i-k);
                k++;
            }
        }
        if(flag == 0)
        {
            intervals.push_back(newInterval);
        }
        return intervals;
    }
};
