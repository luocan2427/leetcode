class Solution {
public:
    int longestValidParentheses(string s) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int n = s.size();
        vector<bool> tmp(n,0);
        stack<pair<char,int> > stk;
        for(int i = 0;i < n;i++)
        {
            if(s[i] == '(' || stk.empty())
            {
                stk.push(make_pair(s[i],i));
            }
            else
            {
                if(stk.top().first == '(')
                {
                    tmp[i] = 1;
                    tmp[stk.top().second] = 1;
                    stk.pop();
                }
            }
        }
        int max = 0;
        for(int i = 0;i < n;i++)
        {
            if(tmp[i] == 1)
            {
                int temp = 0;
                {
                    while(i < n && tmp[i] == 1)
                    {
                        temp++;
                        i++;
                    }
                }
                if(temp > max)
                {
                    max = temp;
                }
            }
        }
        return max;
    }
};