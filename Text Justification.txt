class Solution {
public:
    vector<string> fullJustify(vector<string> &words, int L) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<string> ret;
        int i = 0;
        while(i < words.size())
        {
            int size = 0;
            int beg = i;
            while(i < words.size())
            {
                int newSize = size == 0 ? words[i].size() : size + 1 + words[i].size();
                if (newSize <= L)
                {
                    size = newSize;
                }
                else
                {
                    break;
                }
                i++;
            }
            int spaceCount = L - size;
            int everyCount;
            if (i-1-beg != 0 && i != words.size())
            {
                everyCount = spaceCount/(i-1-beg);
                spaceCount %= (i-1-beg);
            }
            else
            {
                everyCount = 0;
            }
            string s;
            for(int j = beg;j < i;j++)
            {
                if (j == beg)
                {
                    s = words[j];
                }
                else
                {
                    s += ' ';
                    for(int k = 0;k < everyCount;k++)
                    {
                        s += ' ';
                    }
                    if (spaceCount > 0 && i != words.size())
                    {
                        s += ' ';
                        spaceCount--;
                    }
                    s += words[j];
                }
            }
            for(int j = 0; j < spaceCount; j++)
            {
                s += ' ';
            }
            ret.push_back(s);
        }
        return ret;
    }
};