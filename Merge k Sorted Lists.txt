/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
struct Cmp {
    bool operator() (const pair<int, ListNode*> a, const pair<int, ListNode*> b) {
        return a.first > b.first;
    }  
};
class Solution {
public:
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        priority_queue<pair<int, ListNode*> ,vector<pair<int, ListNode*> >,Cmp > heap;
        for(int i = 0;i < lists.size();i++) 
            if(lists[i] != NULL)
                heap.push(make_pair(lists[i]->val,lists[i]));
        ListNode *head = NULL;
        ListNode **cur = &head;
        while(!heap.empty()) 
        {
            *cur = heap.top().second;
            cur = &((*cur)->next);
            heap.pop();
            if (*cur != NULL)
                heap.push(make_pair((*cur)->val,*cur));
        }
        return head;
    }
};
