/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > levelOrderBottom(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        queue<pair<TreeNode *,int> > que;
        que.push(make_pair(root,0));
        vector<vector<int> > res;
        vector<int> tmp;
        int cur = 0;
        while(!que.empty())
        {
            if(que.front().first == NULL)
            {
                que.pop();
                continue;
            }
            if(que.front().second == cur)
            {
                tmp.push_back(que.front().first->val);
            }
            else
            {
                cur = que.front().second;
                res.push_back(tmp);
                tmp.clear();
                tmp.push_back(que.front().first->val);
            }
            que.push(make_pair(que.front().first->left,que.front().second+1));
            que.push(make_pair(que.front().first->right,que.front().second+1));
            que.pop();
        }
        if(!tmp.empty())
            res.push_back(tmp);
        reverse(res.begin(),res.end());
        return res;
    }
};
