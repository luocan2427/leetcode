/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if(preorder.size() == 0)
        {
            return NULL;
        }
        return creatTree(preorder,inorder,0,preorder.size()-1,0,inorder.size());
    }
    TreeNode *creatTree(vector<int> &preorder, vector<int> &inorder, int prel,int prer,int inl,int inr)
    {
        if(prel > prer || inl > inr)
        {
            return NULL;
        }
        if(prel == prer)
        {
            return new TreeNode(preorder[prel]); 
        }
        TreeNode *root = new TreeNode(preorder[prel]);
        int i = inl;
        while(inorder[i] != preorder[prel])
        {
            i++;
        }
        int inl2 = i-1;
        int inr0 = i+1;
        root->left = creatTree(preorder,inorder,prel+1,prel+inl2-inl+1,inl,inl2);
        root->right = creatTree(preorder,inorder,prel+2+inl2-inl,prer,inr0,inr);
    }
};