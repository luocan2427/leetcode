bool palindrome[2000][2000] = {0};
class Solution {
public:
    vector<vector<string>> partition(string s) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int n = s.size();
        int b,t;
        memset(palindrome,0,sizeof(palindrome));
        for(int i = 0;i < n;i++)
        {
            findPal(s,i,i);
            findPal(s,i,i+1);
        }
        vector<vector<string> > res;
        vector<string> tmp;
        search(res,s,tmp,0);
        return res;
    }
    void search(vector<vector<string> > &res,string s,vector<string> tmp,int b)
    {
        if(b == s.size())
            res.push_back(tmp);
        for(int i = b;i < s.size();i++)
            if(palindrome[b][i] == 1)
            {
                vector<string> temp = tmp;
                temp.push_back(s.substr(b,i+1-b));
                search(res,s,temp,i+1);
            }
    }
    void findPal(string &s, int left, int right)
    {
        while(0 <= left && right < s.size() && s[left] == s[right])
        {
            palindrome[left][right] = 1;
            left--;
            right++;
        }        
    }
};
